import requests
import json
from typing import Dict, List

class CVATAnnotationUploader:
    def __init__(self, base_url: str, username: str, password: str):
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        self.authenticate(username, password)
        self.setup_csrf_headers()
    
    def authenticate(self, username: str, password: str):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ CVAT"""
        auth_url = f"{self.base_url}/api/auth/login"
        response = self.session.post(auth_url, json={
            "username": username,
            "password": password
        })
        if response.status_code != 200:
            raise Exception(f"Auth failed: {response.text}")
        print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")

    def setup_csrf_headers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ CSRF –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–∑ –∫—É–∫"""
        csrf_token = self.get_csrf_from_cookies()
        if csrf_token:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSRF –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –í–°–ï–• –∑–∞–ø—Ä–æ—Å–æ–≤
            self.session.headers.update({
                'X-CSRFToken': csrf_token,
                'Referer': self.base_url  # –ß–∞—Å—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è CSRF
            })
            print(f"üîê CSRF —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {csrf_token[:20]}...")
        else:
            print("‚ùå CSRF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—É–∫–∞—Ö")

    def get_csrf_from_cookies(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ CSRF —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∫—É–∫"""
        for cookie in self.session.cookies:
            if 'csrftoken' in cookie.name:
                return cookie.value
        return None

    def upload_annotations_direct(self, job_id: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º CSRF"""
        print(f"\nüéØ –ó–ê–ì–†–£–ó–ö–ê –ê–ù–ù–û–¢–ê–¶–ò–ô –î–õ–Ø JOB {job_id}")
        
        annotations_url = f"{self.base_url}/api/jobs/{job_id}/annotations"
        
        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        print("\n1. üì• –¢–µ–∫—É—â–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏:")
        response = self.session.get(annotations_url)
        if response.status_code == 200:
            current = response.json()
            print(f"   –í–µ—Ä—Å–∏—è: {current.get('version')}, Shapes: {len(current.get('shapes', []))}")
        
        # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        test_annotation = self._create_test_annotation()
        print(f"\n2. üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º {len(test_annotation['shapes'])} shapes...")
        
        # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        response = self.session.put(annotations_url, json=test_annotation)
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text}")
            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            self._try_alternative_upload_methods(job_id, test_annotation)
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._check_upload_result(job_id)

    def _try_alternative_upload_methods(self, job_id: int, annotation: Dict):
        """–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑–∫–∏"""
        print("\nüîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã...")
        
        annotations_url = f"{self.base_url}/api/jobs/{job_id}/annotations"
        
        # –ú–µ—Ç–æ–¥ 1: PATCH
        print("   üîπ –ú–µ—Ç–æ–¥ PATCH:")
        response = self.session.patch(annotations_url, json=annotation)
        print(f"      Status: {response.status_code}")
        
        # –ú–µ—Ç–æ–¥ 2: POST
        print("   üîπ –ú–µ—Ç–æ–¥ POST:")
        response = self.session.post(annotations_url, json=annotation)
        print(f"      Status: {response.status_code}")
        
        # –ú–µ—Ç–æ–¥ 3: –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        print("   üîπ –° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏:")
        headers = {
            'X-CSRFToken': self.get_csrf_from_cookies(),
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        }
        response = self.session.put(annotations_url, json=annotation, headers=headers)
        print(f"      Status: {response.status_code}")

    def upload_via_task_with_csrf(self, task_id: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á—É —Å CSRF"""
        print(f"\nüì¶ –ó–ê–ì–†–£–ó–ö–ê –ß–ï–†–ï–ó TASK {task_id}")
        
        task_annotations_url = f"{self.base_url}/api/tasks/{task_id}/annotations"
        
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        test_annotation = self._create_test_annotation()
        print("1. üì§ –ü—Ä—è–º—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏:")
        response = self.session.put(task_annotations_url, json=test_annotation)
        print(f"   Status: {response.status_code}")
        
        if response.status_code != 200:
            # –ú–µ—Ç–æ–¥ 2: CVAT —Ñ–æ—Ä–º–∞—Ç
            print("2. üì§ CVAT 1.1 —Ñ–æ—Ä–º–∞—Ç:")
            self._upload_cvat_format(task_id)

    def _upload_cvat_format(self, task_id: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CVAT 1.1"""
        import_url = f"{self.base_url}/api/tasks/{task_id}/annotations"
        
        cvat_xml = """<?xml version="1.0" encoding="utf-8"?>
<annotations>
  <version>1.1</version>
  <meta>
    <task>
      <id>{task_id}</id>
      <name>Test Task</name>
      <size>421</size>
      <mode>annotation</mode>
      <labels>
        <label>
          <name>building_machine</name>
        </label>
        <label>
          <name>car</name>
        </label>
      </labels>
    </task>
  </meta>
  <image id="0" name="image0.jpg">
    <box label="building_machine" occluded="0" xtl="100" ytl="100" xbr="200" ybr="200">
    </box>
  </image>
  <image id="1" name="image1.jpg">
    <box label="car" occluded="0" xtl="150" ytl="150" xbr="250" ybr="250">
    </box>
  </image>
</annotations>""".format(task_id=task_id)
        
        files = {
            'annotation_file': ('annotations.xml', cvat_xml, 'application/xml')
        }
        
        data = {
            'format': 'CVAT 1.1'
        }
        
        response = self.session.put(import_url, files=files, data=data)
        print(f"   Status: {response.status_code}")
        if response.status_code in [200, 202]:
            print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.text[:200]}")

    def debug_csrf_workflow(self):
        """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CSRF workflow"""
        print("\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CSRF:")
        
        # –¢–µ–∫—É—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        print("üìã –¢–µ–∫—É—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å–µ—Å—Å–∏–∏:")
        for key, value in self.session.headers.items():
            print(f"   {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSRF —ç–Ω–¥–ø–æ–∏–Ω—Ç
        csrf_url = f"{self.base_url}/api/auth/csrf"
        response = self.session.get(csrf_url)
        print(f"\nüîê CSRF —ç–Ω–¥–ø–æ–∏–Ω—Ç: {response.status_code}")
        if response.status_code == 200:
            print(f"   CSRF –¥–∞–Ω–Ω—ã–µ: {response.json()}")

    def _create_test_annotation(self) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"""
        return {
            "version": 1,
            "tags": [],
            "shapes": [
                {
                    "type": "rectangle",
                    "occluded": False,
                    "frame": 0,
                    "label_id": 87,  # building_machine
                    "group": 0,
                    "source": "manual",
                    "attributes": [],
                    "points": [100.0, 100.0, 200.0, 200.0]
                },
                {
                    "type": "rectangle",
                    "occluded": False,
                    "frame": 1,
                    "label_id": 88,  # car
                    "group": 0,
                    "source": "manual",
                    "attributes": [],
                    "points": [150.0, 150.0, 250.0, 250.0]
                }
            ],
            "tracks": []
        }

    def _check_upload_result(self, job_id: int):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏"""
        print("\n3. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:")
        annotations_url = f"{self.base_url}/api/jobs/{job_id}/annotations"
        response = self.session.get(annotations_url)
        
        if response.status_code == 200:
            updated = response.json()
            print(f"   –í–µ—Ä—Å–∏—è: {updated.get('version')}")
            print(f"   Shapes: {len(updated.get('shapes', []))}")
            print(f"   Tracks: {len(updated.get('tracks', []))}")
            print(f"   Tags: {len(updated.get('tags', []))}")
            
            if updated.get('shapes'):
                print("   üÜï –î–µ—Ç–∞–ª–∏ shapes:")
                for shape in updated.get('shapes', []):
                    print(f"     - Frame {shape.get('frame')}: {shape.get('type')} (label_id: {shape.get('label_id')})")

def main():
    CVAT_URL = "http://212.20.47.88:7555"
    USERNAME = "Boroda-v-goroshek"
    PASSWORD = "RAlf2005"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π
    
    try:
        uploader = CVATAnnotationUploader(CVAT_URL, USERNAME, PASSWORD)
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        uploader.debug_csrf_workflow()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
        job_id = 770
        task_id = 827
        
        uploader.upload_annotations_direct(job_id)
        
        # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á—É
        # uploader.upload_via_task_with_csrf(task_id)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()