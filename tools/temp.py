import time
from typing import Optional

import requests
import yaml
import pandas as pd


def create_session(base_url, username, password) -> requests.Session:
        """
        Create authenticated session with CVAT.

        Returns
        -------
        requests.Session
            Authenticated session
        """

        session = requests.Session()
        
        login_response = session.post(
            f"{base_url}/api/auth/login",
            json={"username": username, "password": password},
            timeout=30,
        )

        if login_response.status_code != 200:
            raise Exception(f"Login failed: {login_response.text}")

        auth_data = login_response.json()
        session.headers.update({"Authorization": f"Token {auth_data['key']}"})
        
        return session


def get_all_tasks(session, base_url, project_id: int | None = None):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)"""
    all_tasks = []
    page = 1
    
    while True:
        url = f"{base_url}/api/tasks"
        params = {"page": page, "page_size": 100}
        
        if project_id:
            params["project_id"] = project_id
            
        response = session.get(url, params=params)
        
        if response.status_code != 200:
            break
            
        data = response.json()
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π CVAT API (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
        if isinstance(data, dict) and 'results' in data:
            tasks = data['results']
            all_tasks.extend(tasks)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã - –≤—ã—Ö–æ–¥–∏–º
            if not data.get('next'):
                break
        # –°—Ç–∞—Ä—ã–π CVAT API (–ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫)
        elif isinstance(data, list):
            all_tasks.extend(data)
            break
        else:
            break
            
        page += 1
    
    return all_tasks


def refresh_tasks(project_id: int = 35):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –ø—Ä–æ–µ–∫—Ç–∞ —Å —É—á–µ—Ç–æ–º –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    base_url = "http://212.20.47.88:7555"
    username = "Boroda-v-goroshek"
    password = "RAlf2005"
    session = create_session(base_url, username, password)
    
    all_tasks = []
    page = 1
    page_size = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    while True:
        tasks_response = session.get(
            f"{base_url}/api/tasks?project_id={project_id}&page={page}&page_size={page_size}"
        )
        
        if tasks_response.status_code != 200:
            print(f"‚ùå Error getting tasks: {tasks_response.status_code}")
            break
            
        tasks_data = tasks_response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–∞
        if isinstance(tasks_data, dict) and 'results' in tasks_data:
            tasks = tasks_data['results']
            all_tasks.extend(tasks)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if not tasks_data.get('next'):
                break
        elif isinstance(tasks_data, list):
            all_tasks.extend(tasks_data)
            break  # –ï—Å–ª–∏ –≤–µ—Ä–Ω—É–ª—Å—è —Å–ø–∏—Å–æ–∫, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—Å–µ –∑–∞–¥–∞—á–∏
        else:
            print(f"‚ö† Unexpected response format: {type(tasks_data)}")
            break
            
        page += 1
    
    print(f"Total tasks found: {len(all_tasks)}")
    
    for task in all_tasks:
        task_id = task['id']
        task_name = task['name']
        
        print(f"Refreshing task: {task_name} (ID: {task_id})")
        
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        update_response = session.patch(
            f"{base_url}/api/tasks/{task_id}",
            json={"name": task_name}
        )
        print(f"   Update status: {update_response.status_code}")

def diagnose_task_problems(session, base_url, project_id: int):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–¥–∞—á–∞–º–∏"""
    tasks = get_all_tasks(session, base_url, project_id)
    
    for task in tasks:
        task_id = task['id']
        task_name = task['name']
        
        print(f"\nüîç Diagnosing: {task_name} (ID: {task_id})")
        print("-" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—å—é (—Å–∞–º—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç)
        preview_response = session.get(f"{base_url}/api/tasks/{task_id}/data?type=preview")
        print(f"Preview: {preview_response.status_code}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        meta_response = session.get(f"{base_url}/api/tasks/{task_id}/data/meta")
        if meta_response.status_code == 200:
            meta = meta_response.json()
            print(f"Frames: {len(meta.get('frames', []))}")
        else:
            print(f"Meta: {meta_response.status_code}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ—Ä–µ–π–º–∞
        frame_response = session.get(f"{base_url}/api/tasks/{task_id}/data?type=frame&number=0")
        print(f"Frame 0: {frame_response.status_code}")


def force_refresh_task_data(session, base_url, task_id):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ)"""
    
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ data endpoint
    data_response = session.put(
        f"{base_url}/api/tasks/{task_id}/data",
        json={"image_quality": 100}  # –õ—é–±—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —á—Ç–æ–±—ã —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    )
    print(f"Data refresh: {data_response.status_code}")
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏
    restart_response = session.post(f"{base_url}/api/tasks/{task_id}/data?action=restart")
    print(f"Restart: {restart_response.status_code}")


def verify_share_paths(session, base_url, share_path, task_names):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—Å–µ –ø—É—Ç–∏ –≤ Share –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"""
    print("üîé Verifying share paths...")
    
    for task_name in task_names:
        full_path = f"{share_path}/{task_name}/obj_train_data"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
        share_response = session.get(f"{base_url}/api/server/share?directory={full_path}")
        
        if share_response.status_code == 200:
            files = share_response.json()
            images = [f for f in files if f.get('name', '').lower().endswith(('.jpg', '.png', '.jpeg'))]
            print(f"‚úÖ {task_name}: {len(images)} images")
        else:
            print(f"‚ùå {task_name}: Path not accessible")

base_url = "http://212.20.47.88:7555"
username = "Boroda-v-goroshek"
password = "RAlf2005"
session = create_session(base_url, username, password)
tasks = get_all_tasks(session, base_url, 35)
task_names = [task['name'] for task in tasks]
verify_share_paths(session, base_url, "shestakov/data_for_cvat", task_names)

